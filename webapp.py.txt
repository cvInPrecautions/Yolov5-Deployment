"""
Simple app to upload an image via a web form 
and view the inference results on the image in the browser.
"""
import argparse
import io
import os
from PIL import Image
import cv2
from numpy import asarray

import torch
from flask import Flask, render_template, request, redirect

app = Flask(__name__)

#https://docs.ultralytics.com/tutorials/pytorch-hub/
@app.route("/", methods=["GET", "POST"])
def predict():
    if request.method == "POST":
        if "file" not in request.files:
            return redirect(request.url)
        file = request.files["file"]
        if not file:
            return

        img_bytes = file.read()
        img = Image.open(io.BytesIO(img_bytes))
        model.classes = [0]
        model.iou = 0.45  # NMS IoU threshold (0-1)
        results = model(img, size=640)
        predictions_xyxy = results.pandas().xyxy[0]
        count=len(predictions_xyxy)
        people_counter = 'Number of people ' + str(count)
        white = (255, 255, 255)
        text_thickness = 1
        title_thickness = 2
        title_size = 1
        font = cv2.FONT_HERSHEY_SIMPLEX # or cv2.FONT_HERSHEY_PLAIN
        img = asarray(img)
        cv2.putText(img, people_counter, (50,50), font, title_size, white, title_thickness);
        img = Image.fromarray(img)
        results = model(img, size=640)
        img.save("car2.png")
        # for debugging
        # data = results.pandas().xyxy[0].to_json(orient="records")
        # return data


        results.render()  # updates results.imgs with boxes and labels
        for img in results.imgs:
            img_base64 = Image.fromarray(img)
            img_base64.save("static/image0.jpg", format="JPEG")
        return redirect("static/image0.jpg")

    return render_template("index.html.txt")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Flask app exposing yolov5 models")
    parser.add_argument("--port", default=5000, type=int, help="port number")
    args = parser.parse_args()
    model = torch.hub.load('ultralytics/yolov5', 'custom', 'The model.pt')
    #model = torch.hub.load(
       # "ultralytics/yolov5", "yolov5s", pretrained=True, force_reload=True, autoshape=True
    #)  # force_reload = recache latest code
    model.eval()
    app.run(host="0.0.0.0", port=args.port)  # debug=True causes Restarting with stat